package `in`.co.ngcapp.customaccount.Utilityimport android.Manifestimport android.annotation.TargetApiimport android.app.Activityimport android.app.AlertDialogimport android.app.Fragmentimport android.content.Contextimport android.content.DialogInterfaceimport android.content.pm.PackageManagerimport android.os.Buildimport android.support.v4.app.ActivityCompatimport android.support.v4.content.ContextCompatclass PermissionCheck {    companion object {        val MY_PERMISSIONS_REQUEST_READ_EXTERNAL_STORAGE = 123        @TargetApi(Build.VERSION_CODES.JELLY_BEAN)        fun checkPermission(context: Context): Boolean {            val currentAPIVersion = Build.VERSION.SDK_INT            return if (currentAPIVersion >= android.os.Build.VERSION_CODES.M) {                if (ContextCompat.checkSelfPermission(context, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {                    false                } else {                    true                }            } else {                true            }        }        fun requestPermission(context: Context) {            if (ActivityCompat.shouldShowRequestPermissionRationale(context as Activity, Manifest.permission.READ_EXTERNAL_STORAGE)) {                val alertBuilder = AlertDialog.Builder(context)                alertBuilder.setCancelable(true)                alertBuilder.setTitle("Permission necessary")                alertBuilder.setMessage("External storage permission is necessary")                alertBuilder.setPositiveButton(android.R.string.yes) { dialog, which -> ActivityCompat.requestPermissions(context as Activity, arrayOf(Manifest.permission.READ_EXTERNAL_STORAGE), MY_PERMISSIONS_REQUEST_READ_EXTERNAL_STORAGE) }                val alert = alertBuilder.create()                alert.show()            } else {                ActivityCompat.requestPermissions(context as Activity, arrayOf(Manifest.permission.READ_EXTERNAL_STORAGE), MY_PERMISSIONS_REQUEST_READ_EXTERNAL_STORAGE)            }        }    }}